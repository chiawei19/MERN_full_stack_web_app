{"version":3,"sources":["webpack:///./src/IssueList.jsx"],"names":["IssueList","React","Component","fetchData","match","search","showError","params","URLSearchParams","vars","hasSelection","selectedId","get","status","effortMin","parseInt","Number","isNaN","effortMax","id","idInt","page","isNan","query","data","graphQLFetch","constructor","issues","store","initialData","issueList","selectedIssue","issue","state","closeIssue","bind","deleteIssue","componentDidMount","loadData","componentDidUpdate","prevProps","location","prevSearch","prevId","props","setState","index","prevState","newList","issueUpdate","pathname","history","showSuccess","issueDelete","push","splice","render","IssueListWithToast","withToast"],"mappings":"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","file":"server.75cfde6d95fc2ef3d768.hot-update.js","sourcesContent":["import React from 'react';\nimport URLSearchParams from 'url-search-params';\nimport { Route } from 'react-router-dom';\nimport { Panel } from 'react-bootstrap';\n\nimport IssueFilter from './IssueFilter.jsx';\nimport IssueTable from './IssueTable.jsx';\nimport IssueDetail from './IssueDetail.jsx';\nimport graphQLFetch from './graphQLFetch.js';\nimport store from './store.js';\nimport withToast from './withToast.jsx';\n\nclass IssueList extends React.Component {\n  static async fetchData(match, search, showError) {\n    const params = new URLSearchParams(search);\n    const vars = { hasSelection: false, selectedId: 0 };\n    if (params.get('status')) vars.status = params.get('status');\n\n    const effortMin = parseInt(params.get('effortMin'), 10);\n    if (!Number.isNaN(effortMin)) vars.effortMin = effortMin;\n    const effortMax = parseInt(params.get('effortMax'), 10);\n    if (!Number.isNaN(effortMax)) vars.effortMax = effortMax;\n\n    const { params: { id } } = match;\n    const idInt = parseInt(id, 10);\n    if (!Number.isNaN(idInt)) {\n      vars.hasSelection = true;\n      vars.selectedId = idInt;\n    }\n\n    let page = parseInt(params.get('page'), 10);\n    if (Number.isNan(page)) page = 1;\n    vars.page = page;\n\n    const query = `query issueList(\n      $status: StatusType\n      $effortMin: Int\n      $effortMax: Int\n      $hasSelection: Boolean!\n      $selectedId: Int!\n      $page: Int\n    ) {\n      issueList (\n        status: $status\n        effortMin: $effortMin\n        effortMax: $effortMax\n        page: $page\n      ) {\n        issues {\n          id title status owner\n          created effort due\n        }\n        page\n      }\n      issue(id: $selectedId) @include (if : $hasSelection) {\n        id description\n      }\n    }`;\n\n    const data = await graphQLFetch(query, vars, showError);\n    return data;\n  }\n\n  constructor() {\n    super();\n    const issues = store.initialData ? store.initialData.issueList.issues : null;\n    const selectedIssue = store.initialData ? store.initialData.issue : null;\n    delete store.initialData;\n    this.state = {\n      issues,\n      selectedIssue,\n    };\n    this.closeIssue = this.closeIssue.bind(this);\n    this.deleteIssue = this.deleteIssue.bind(this);\n  }\n\n  componentDidMount() {\n    const { issues } = this.state;\n    if (issues == null) this.loadData();\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      location: { search: prevSearch }, \n      match : { params: { id: prevId } } \n    } = prevProps;\n    const { location: { search }, match: { params: { id } } } = this.props;\n    if (prevSearch !== search || prevId !== id) {\n      this.loadData();\n    }\n  }\n\n  async loadData() {\n    const { location: { search }, match, showError } = this.props;\n\n    const data = await IssueList.fetchData(match, search, showError);\n    if (data) {\n      this.setState({ issues: data.issueList.issues, selectedIssue: data.issue });\n    }\n  }\n\n  async closeIssue(index) {\n    const query = `mutation issueClose($id: Int!) {\n      issueUpdate(id: $id, changes: { status: Closed }) {\n        id title status owner\n        effort created due description\n      }\n    }`;\n    const { issues } = this.state;\n    const { showError } = this.props;\n    const data = await graphQLFetch(query, { id: issues[index].id }, showError);\n    if (data) {\n      this.setState((prevState) => {\n        const newList = [...prevState.issues];\n        newList[index] = data.issueUpdate;\n        return { issues: newList };\n      });\n    } else {\n      this.loadData();\n    }\n  }\n\n  async deleteIssue(index) {\n    const query = `mutation issueDelete($id: Int!) {\n      issueDelete(id: $id)\n    }`;\n    const { issues } = this.state;\n    const { location: { pathname, search }, history } = this.props;\n    const { showSuccess, showError } = this.props;\n    const { id } = issues[index];\n    const data = await graphQLFetch(query, { id }, showError);\n    if (data && data.issueDelete) {\n      this.setState((prevState) => {\n        const newList = [...prevState.issues];\n        if (pathname === `/issues/${id}`) {\n          history.push({ pathname: '/issues', search });\n        }\n        newList.splice(index, 1);\n        showSuccess(`Deleted issue ${id} successfully.`);\n        return { issues: newList };\n      });\n    } else {\n      this.loadData();\n    }\n  }\n\n  render() {\n    const { issues } = this.state;\n    if (issues == null) return null;\n    const { selectedIssue } = this.state;\n\n    return (\n      <React.Fragment>\n        <Panel>\n          <Panel.Heading>\n            <Panel.Title toggle>Filter</Panel.Title>\n          </Panel.Heading>\n          <Panel.Body collapsible>\n            <IssueFilter urlBase=\"/issues\"/>\n          </Panel.Body>\n        </Panel>\n        <IssueTable\n          issues={issues}\n          closeIssue={this.closeIssue}\n          deleteIssue={this.deleteIssue}\n        />\n\n        <IssueDetail issue={selectedIssue} />\n      </React.Fragment>\n    );\n  }\n}\n\nconst IssueListWithToast = withToast(IssueList);\nIssueListWithToast.fetchData = IssueList.fetchData;\nexport default IssueListWithToast;\n"],"sourceRoot":""}